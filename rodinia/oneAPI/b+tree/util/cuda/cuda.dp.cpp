#include <CL/sycl.hpp>
#include <dpct/dpct.hpp>

#ifdef __cplusplus
extern "C" {
#endif

//===============================================================================================================================================================================================================200
//	SET_DEVICE CODE
//===============================================================================================================================================================================================================200

//======================================================================================================================================================150
//	INCLUDE/DEFINE
//======================================================================================================================================================150

#include "cuda.h" // (in library path specified to compiler)

//======================================================================================================================================================150
//	FUNCTIONS
//======================================================================================================================================================150

//====================================================================================================100
//	SET DEVICE
//====================================================================================================100

void setdevice(void){

	// variables
	int num_devices;
	int device;

	// work
        num_devices = dpct::dev_mgr::instance().device_count();
        if (num_devices > 1) {
		
		// variables
		int max_multiprocessors; 
		int max_device;
                dpct::device_info properties;

                // initialize variables
		max_multiprocessors = 0;
		max_device = 0;
		
		for (device = 0; device < num_devices; device++) {
                        dpct::dev_mgr::instance().get_device(device).get_device_info(properties);
                        if (max_multiprocessors < properties.get_max_compute_units()) {
                                max_multiprocessors = properties.get_max_compute_units();
                                max_device = device;
			}
		}
                dpct::dev_mgr::instance().select_device(max_device);
        }

}

//====================================================================================================100
//	GET LAST ERROR
//====================================================================================================100

void checkCUDAError(sycl::exception const e)
{
        std::cerr << e.what() << "Exception caught at file:" << __FILE__
        << ", line:" << __LINE__ << std::endl;
        fflush(NULL);
        exit(EXIT_FAILURE);
}

//===============================================================================================================================================================================================================200
//	END
//===============================================================================================================================================================================================================200

#ifdef __cplusplus
}
#endif
